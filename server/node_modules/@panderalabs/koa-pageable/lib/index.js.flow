// @flow

import mapValues from "lodash.mapvalues";
import isEmpty from "lodash.isempty";
import keyBy from "lodash.keyby";
import flatMap from "lodash.flatmap";
import type {Context} from "koa";
declare export class ArrayPage<T> extends Page {

  content: Array<T>;
  constructor(content?: Array<T>, totalElements: number, pageable: Pageable): void;
  map<R>(iteratee: (_: T) => R): ArrayPage<R>;
}

declare export var Direction: {asc: string, desc: string};
export type DirectionType = $Keys<{asc: string, desc: string}>;
declare export class IndexablePage<I, T: {id: I}> extends Page {

  content: Array<T>;
  indexed: boolean;
  constructor(content?: Array<T>, totalElements: number, pageable: Pageable): void;
  map<R: {id: I}>(iteratee: (_: T) => R): IndexablePage<I, R>;
  toJSON(): Page;
}

declare export class IndexedPage<I, T: ?Object> extends Page {

  ids: Array<I>;
  index: {[index: I]: T};
  constructor(ids: Array<I>, index: {[index: I]: T}, totalElements: number, pageable: Pageable): void;
  map<R: ?Object>(iteratee: (_: T) => R): IndexedPage<I, R>;
}

declare export class InvalidSortError extends KoaPageableError {
  static status: number;

}
declare export class KoaPageableError extends Error {
  static status: number;

  message: string;
  name: string;
  stack: string;
  constructor(message: string): void;
}
declare export class NumberFormatError extends KoaPageableError {
  static status: number;

  constructor(message: string): void;
}
declare export class Order {
  static _DEFAULT_DIRECTION: string;

  direction: $Keys<{asc: string, desc: string}>;
  property: string;
  constructor(property: string, direction?: $Keys<{asc: string, desc: string}>): any;
}
declare export class Page {

  first: boolean;
  last: boolean;
  number: number;
  numberOfElements: number;
  size: number;
  sort: ?Sort;
  totalElements: number;
  totalPages: number;
  constructor(totalElements: number, pageable: Pageable): void;
}
declare export class Pageable {

  indexed: boolean;
  page: number;
  size: number;
  sort: ?Sort;
  constructor(pageNumber?: number, pageSize?: number, indexed?: boolean, sort: ?string | ?Array<string> | Sort): void;
}
declare export class Sort {

  orders: Array<Order>;
  constructor(orders: Array<Order>): any;
  forEach(iteratee: (property: string, direction: $Keys<{asc: string, desc: string}>) => mixed /* UNEXPECTED TYPE: ExistsT */): any;
  toJSON(): Array<Order>;
}
declare export function paginate(ctx: any, next: Function): Promise<any>;
